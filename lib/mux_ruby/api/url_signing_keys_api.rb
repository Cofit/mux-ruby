=begin
# Mux Ruby - Copyright 2019 Mux Inc.
# NOTE: This file is auto generated. Do not edit this file manually.
=end

require 'uri'

module MuxRuby
  class URLSigningKeysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a URL signing key
    # Creates a new signing key pair. When creating a new signing key, the API will generate a 2048-bit RSA key-pair and return the private key and a generated key-id; the public key will be stored at Mux to validate signed tokens. 
    # @param [Hash] opts the optional parameters
    # @return [SigningKeyResponse]
    def create_url_signing_key(opts = {})
      data, _status_code, _headers = create_url_signing_key_with_http_info(opts)
      data
    end

    # Create a URL signing key
    # Creates a new signing key pair. When creating a new signing key, the API will generate a 2048-bit RSA key-pair and return the private key and a generated key-id; the public key will be stored at Mux to validate signed tokens. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SigningKeyResponse, Fixnum, Hash)>] SigningKeyResponse data, response status code and response headers
    def create_url_signing_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: URLSigningKeysApi.create_url_signing_key ...'
      end
      # resource path
      local_var_path = '/video/v1/signing-keys'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SigningKeyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: URLSigningKeysApi#create_url_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a URL signing key
    # Deletes an existing signing key. Use with caution, as this will invalidate any existing signatures and no URLs can be signed using the key again. 
    # @param signing_key_id The ID of the signing key.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_url_signing_key(signing_key_id, opts = {})
      delete_url_signing_key_with_http_info(signing_key_id, opts)
      nil
    end

    # Delete a URL signing key
    # Deletes an existing signing key. Use with caution, as this will invalidate any existing signatures and no URLs can be signed using the key again. 
    # @param signing_key_id The ID of the signing key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_url_signing_key_with_http_info(signing_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: URLSigningKeysApi.delete_url_signing_key ...'
      end
      # verify the required parameter 'signing_key_id' is set
      if @api_client.config.client_side_validation && signing_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'signing_key_id' when calling URLSigningKeysApi.delete_url_signing_key"
      end
      # resource path
      local_var_path = '/video/v1/signing-keys/{SIGNING_KEY_ID}'.sub('{' + 'SIGNING_KEY_ID' + '}', signing_key_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: URLSigningKeysApi#delete_url_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a URL signing key
    # Retrieves the details of a URL signing key that has previously been created. Supply the unique signing key ID that was returned from your previous request, and Mux will return the corresponding signing key information. **The private key is not returned in this response.** 
    # @param signing_key_id The ID of the signing key.
    # @param [Hash] opts the optional parameters
    # @return [SigningKeyResponse]
    def get_url_signing_key(signing_key_id, opts = {})
      data, _status_code, _headers = get_url_signing_key_with_http_info(signing_key_id, opts)
      data
    end

    # Retrieve a URL signing key
    # Retrieves the details of a URL signing key that has previously been created. Supply the unique signing key ID that was returned from your previous request, and Mux will return the corresponding signing key information. **The private key is not returned in this response.** 
    # @param signing_key_id The ID of the signing key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SigningKeyResponse, Fixnum, Hash)>] SigningKeyResponse data, response status code and response headers
    def get_url_signing_key_with_http_info(signing_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: URLSigningKeysApi.get_url_signing_key ...'
      end
      # verify the required parameter 'signing_key_id' is set
      if @api_client.config.client_side_validation && signing_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'signing_key_id' when calling URLSigningKeysApi.get_url_signing_key"
      end
      # resource path
      local_var_path = '/video/v1/signing-keys/{SIGNING_KEY_ID}'.sub('{' + 'SIGNING_KEY_ID' + '}', signing_key_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SigningKeyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: URLSigningKeysApi#get_url_signing_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List URL signing keys
    # Returns a list of URL signing keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to include in the response (default to 25)
    # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60; (default to 1)
    # @return [ListSigningKeysResponse]
    def list_url_signing_keys(opts = {})
      data, _status_code, _headers = list_url_signing_keys_with_http_info(opts)
      data
    end

    # List URL signing keys
    # Returns a list of URL signing keys. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of items to include in the response
    # @option opts [Integer] :page Offset by this many pages, of the size of &#x60;limit&#x60;
    # @return [Array<(ListSigningKeysResponse, Fixnum, Hash)>] ListSigningKeysResponse data, response status code and response headers
    def list_url_signing_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: URLSigningKeysApi.list_url_signing_keys ...'
      end
      # resource path
      local_var_path = '/video/v1/signing-keys'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['accessToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListSigningKeysResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: URLSigningKeysApi#list_url_signing_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
